{"version":3,"sources":["main.js"],"names":["htmlElement","constructor","element","this","copy","clone","remove","append","parent","tetragon3d","speed","super","baseSpeed","rotationSpeed","clickedId","faces","children","easing","speedMeasure","start","undefined","stop","lastMeasuredAngle","speedArr","avgSpeed","motionData","isAboutToStop","currentAngle","targetAngle","move","dynamicContent","content","willUpdate","calculateEntryValues","animateElement","computeRotatingTime","updateContent","length","applyEasing","accelerate","css","Math","window","animatePlane","computeEasing","threshold","startEase","delay","speedChange","slowAngles","abs","distance","steps","i","push","parseFloat","toFixed","round","value","rotationTime","flag","floor","measureAngle","Date","computeAvgSpeed","arg","shift","$","attr","reduce","a","b","getTargetAngle","e","target","shouldChangeDirection","direction","filter","el","addClass","planeClickEvent","stopPropagation","id","restoreAnimation","one","targetPlane","removeClass","text","myElement"],"mappings":"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","file":"main.js","sourcesContent":["class htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\nclass tetragon3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n    this.baseSpeed = speed > 1 ? 1 : speed;\n    this.rotationSpeed = speed > 1 ? 1 : speed;\n    this.clickedId = '';\n    this.faces = this.element.children('.face');\n    this.easing = [];\n    this.speedMeasure = {\n      start: undefined,\n      stop: undefined,\n      lastMeasuredAngle: undefined,\n      speedArr: [],\n      avgSpeed: undefined\n    };\n    this.motionData = {\n      isAboutToStop: false,\n      currentAngle: 0,\n      targetAngle: undefined,\n      move: true\n    };\n    this.dynamicContent = {\n      content: 1,\n      willUpdate: true\n    }\n  }\n  calculateEntryValues() {\n    this.speedMeasure.avgSpeed = (30 / ( this.rotationSpeed * 60 ) );\n\n  }\n\n  animateElement() {\n\n    if ( !this.speedMeasure.avgSpeed ) this.calculateEntryValues();\n\n    if ( this.motionData.move ){\n\n      let rotationSpeed = this.computeRotatingTime();\n\n      this.computeAvgSpeed(rotationSpeed);\n      this.updateContent();\n\n      if (this.easing.length !== 0) this.applyEasing();\n\n      if(this.easing.length === 0 && this.rotationSpeed < this.baseSpeed) this.accelerate();\n\n\n      this.motionData.currentAngle -= this.rotationSpeed;\n      this.motionData.currentAngle = this.motionData.currentAngle <= -360 ? 0 : this.motionData.currentAngle;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.currentAngle}deg)` );\n\n      // targetAngle is set in click event, so after click event rotation will stop\n\n      if( Math.round(this.motionData.currentAngle) === this.motionData.targetAngle ){\n        this.motionData.move = false;\n        this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.targetAngle}deg)` )\n      }\n\n      window.requestAnimationFrame( ()=> this.animateElement() )\n    }\n    else {\n      this.animatePlane();\n    }\n  }\n\n\n  computeEasing(direction){\n    let distance = Math.abs( Math.abs(this.motionData.targetAngle) - Math.abs(this.motionData.currentAngle) );\n\n    let steps = distance < 20 ? 5 : 10;\n    let threshold, delay, speed, speedChange, startEase, slowAngles, easing = [];\n    let baseSpeed = this.rotationSpeed;\n\n    switch (true) {\n      case distance <= 10 :\n        delay = 0;\n        break;\n      case distance <= 20 :\n        delay = 3;\n        break;\n      case distance <= 30 :\n        delay = 8;\n        break;\n      case distance <= 40 :\n        delay = 15;\n        break;\n      case distance <= 50 :\n        delay = 24;\n        break;\n      case distance <= 60 :\n        delay = 32;\n        break;\n      case distance <= 70 :\n        delay = 40;\n        break;\n      case distance <= 80 :\n        delay = 50;\n        break;\n      case distance <= 90 :\n        delay = 60;\n        break;\n\n    }\n\n    threshold = ( distance - delay ) / steps;\n    speedChange = baseSpeed/steps;\n    speed = baseSpeed;\n    startEase = direction === \"forth\" ? this.motionData.currentAngle - delay : this.motionData.currentAngle + delay;\n    slowAngles = startEase;\n\n    threshold = direction === \"forth\" ? -threshold : threshold;\n\n\n    for(let i = 1; i < steps; i++){\n      slowAngles += threshold;\n      speed -= speedChange;\n\n      if ( speed > 0 ) speed = speed < 0.1 ? 0.1 : speed;\n      else speed = speed > -0.1 ? -0.1 : speed;\n\n      easing[i-1] = [];\n\n      easing[i-1].push( Math.round( slowAngles ) );\n      easing[i-1].push( parseFloat( speed.toFixed(2) ) );\n    }\n    return easing;\n\n  }\n  applyEasing(){\n\n    this.easing.forEach(  value => {\n      if ( Math.round(this.motionData.currentAngle) === value[0] )\n        this.rotationSpeed = value[1];\n    })\n  }\n  computeRotatingTime(){\n\n    let currentAngle = Math.abs( Math.floor(this.motionData.currentAngle) );\n    let rotationTime;\n    let flag = !(currentAngle % 31);\n\n    // return if current angle haven't change from last measurement\n    if (this.speedMeasure.lastMeasuredAngle === currentAngle){\n      return null;\n    }\n\n\n    this.speedMeasure.lastMeasuredAngle = currentAngle;\n\n\n    if(this.speedMeasure.measureAngle === currentAngle){\n      this.speedMeasure.stop = new Date();\n      rotationTime =  (this.speedMeasure.stop - this.speedMeasure.start)/1000;\n      return rotationTime;\n    }\n    //every 31 degrees start time, and angle, at which speed will be measured, are set\n    if ( flag ) {\n      this.speedMeasure.measureAngle = this.motionData.currentAngle === 360 ? 30 : currentAngle + 30;\n      this.speedMeasure.start = new Date();\n    }\n    return null\n  }\n  computeAvgSpeed(arg){\n\n    if ( arg === null ) return;\n\n    this.speedMeasure.speedArr.push(arg);\n\n    if ( this.speedMeasure.speedArr.length > 4 ){\n      this.speedMeasure.speedArr.shift();\n\n    }\n    this.speedMeasure.avgSpeed = this.speedMeasure.speedArr.reduce((a,b) => a + b, 0) / this.speedMeasure.speedArr.length;\n\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this.motionData.targetAngle = 0;\n        break;\n      case \"right\":\n        this.motionData.targetAngle = -90;\n        break;\n      case \"back\":\n        this.motionData.targetAngle = -180;\n        break;\n      case \"left\":\n        this.motionData.targetAngle = -270;\n        break;\n    }\n  }\n\n  shouldChangeDirection(){\n    let direction = \"forth\";\n    if( this.motionData.targetAngle === 0 ){\n      //if clicked in front plane, which set target angle to 0 , must have special check, cause current angle is always lesser than 0\n      this.rotationSpeed = this.motionData.currentAngle < -180 ? this.rotationSpeed : -this.rotationSpeed;\n      direction = this.motionData.currentAngle < -180 ? \"forth\" :  \"back\"\n    } else if ( this.motionData.currentAngle < this.motionData.targetAngle ){\n      //all the other cases\n      this.rotationSpeed = -this.rotationSpeed;\n      direction = \"back\"\n    }\n    return direction\n  }\n\n  animatePlane(){\n\n    let myPlane = this.faces.filter( ( i,el ) => $(el).attr('id') === this.clickedId);\n\n    myPlane.addClass(\"focus\")\n  }\n\n  planeClickEvent(){\n    this.faces.on( 'click', (e)=> {\n      if( ! this.motionData.isAboutToStop ){\n\n        let target = $(e.currentTarget);\n        e.stopPropagation();\n        this.getTargetAngle(e);\n        this.clickedId = e.target.id;\n\n        let direction = this.shouldChangeDirection();\n        this.motionData.isAboutToStop = true;\n        this.easing = this.computeEasing(direction);\n\n        target.css('cursor', 'initial');\n\n        $('body')\n          .css('cursor', 'pointer')\n          .one('click', (e) => {\n            this.motionData.isAboutToStop = false;\n            target.css('cursor', 'pointer');\n            $(e.currentTarget).css('cursor', 'initial');\n            this.restoreAnimation();\n          });\n      }\n\n    })\n\n\n  }\n\n  restoreAnimation(){\n    let targetPlane = this.faces\n      .filter( ( i,el ) => $(el).attr('id') === this.clickedId);\n      targetPlane.removeClass(\"focus\");\n    this.easing = [];\n    this.motionData.move = true;\n    this.motionData.targetAngle = undefined;\n    this.clickedId = '';\n    this.rotationSpeed = this.rotationSpeed < 0 ? -this.rotationSpeed : this.rotationSpeed;\n\n    targetPlane.one('transitionend',  () => {\n      this.animateElement();\n    })\n\n  }\n\n  accelerate(){\n    this.rotationSpeed =  parseFloat( ( this.rotationSpeed + 0.005 ).toFixed(3) );\n  }\n\n  updateContent(){\n\n    if ( this.motionData.currentAngle < -10 && this.motionData.currentAngle > -20 && this.dynamicContent.willUpdate){\n\n      this.dynamicContent.content = this.dynamicContent.content +2;  //3/7/11...\n      this.dynamicContent.willUpdate = false;\n      $(this.faces[2]).text(`face ${this.dynamicContent.content}`);\n      $(this.faces[3]).text(`face ${this.dynamicContent.content +1}`);\n\n    } else if (this.motionData.currentAngle < -20 && this.motionData.currentAngle > -30 && !this.dynamicContent.willUpdate){\n\n      this.dynamicContent.willUpdate = true\n\n    } else if ( this.motionData.currentAngle < -180 && this.motionData.currentAngle > -190 && this.dynamicContent.willUpdate ){\n\n      this.dynamicContent.content = this.dynamicContent.content +2; // 5/9/13...\n      this.dynamicContent.willUpdate = false;\n      $(this.faces[0]).text(`face ${this.dynamicContent.content}`);\n      $(this.faces[1]).text(`face ${this.dynamicContent.content + 1}`);\n    } else if ( this.motionData.currentAngle < -190 && this.motionData.currentAngle > -200 && !this.dynamicContent.willUpdate){\n\n      this.dynamicContent.willUpdate = true\n    }\n  }\n\n\n}\n\nlet myElement = new tetragon3d($('#top-layer'),.5);\n\n$(() => {\n\n\n  myElement.animateElement();\n  myElement.planeClickEvent();\n\n});"]}